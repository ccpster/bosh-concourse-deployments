#!/usr/bin/env bash

# Oportunistically configure bosh2 for use
configure_bosh_cli() {
  local bosh_input="$(realpath bosh-cli/*bosh-cli-* 2>/dev/null || true)"
  if [[ -n "${bosh_input}" ]]; then
    export bosh_cli="/usr/local/bin/bosh2"
    cp "${bosh_input}" "${bosh_cli}"
    chmod +x "${bosh_cli}"
  fi
}
configure_bosh_cli

read_with_escaped_newlines() {
  echo "$1" | perl -pe 's|\n|\\n|'
}

remove_terraform_prefix() {
  local terraform_metadata=${1?'Terraform metdata file is required.'}
  local prefix=${2?'Prefix is required.'}

  jq --arg prefix "$prefix" 'with_entries(.key |= sub("^" + $prefix; ""))' "$terraform_metadata"
}

iterate_teams() {
  local concourse_teams=${1?'Concourse teams are required.'}
  local function=${2?'BASH function is required.'}

  for ((i = 0 ; i < $(echo "$concourse_teams" | jq -r length) ; i++ )); do
    local team="$(echo "$concourse_teams" | jq -r ".[$i]")"
    eval $function "$team" "$@:3"
  done
}

set_team() {
  local team=${1?'Concourse team is required.'}
  local concourse_target=${2?'Concourse target is required.'}
  local concourse_github_client_id=${3?'Concourse GitHub Client ID is required.'}
  local concourse_github_client_secret=${4?'Concourse GitHub Client Secret is required.'}

  echo -e "\nAdding '$( echo "$team" | jq -r .name )' team!"
  yes | ./fly -t $concourse_target set-team \
    --team-name="$( echo "$team" | jq -r .name )" \
    --github-auth-team="$( echo "$team" | jq -r .github_team )" \
    --github-auth-client-id="${concourse_github_client_id}" \
    --github-auth-client-secret="${concourse_github_client_secret}"
}

destroy_stale_teams() {
  local concourse_target=${1?'Concourse target is required.'}
  local concourse_teams=${2?'Concourse teams are required.'}

  echo "Destroying stale Concourse teams..."

  ./fly -t $concourse_target teams \
    | awk '{$1=$1}1' \
    | xargs -I team echo '{"name": "team"}' \
    > /tmp/current-teams.json
  local current_teams="$( cat /tmp/current-teams.json | jq -s . )"

  for ((i = 0; i < $(echo "$current_teams" | jq -r length) ; i++ )); do
    local team_name="$(echo "$current_teams" | jq -r ".[$i].name")"

    local found=$( echo "$concourse_teams" | jq -r --arg t $team_name '. | map(select(.name == $t))[0] != null' )
    if [[ "$found" == "false" && "$team_name" != "main" ]]; then
      echo -e "\nDestroying '$team_name' team!!!"
      echo "$team_name" | ./fly -t "$concourse_target" destroy-team -n "$team_name"
    fi
  done
}

ssh_key_file() {
  local tmp_dir=${1?'temp dir is required.'}
  local jumpbox_ssh_key=${2?'Jumpbox SSH key is required.'}

  local ssh_key_path="${tmp_dir}/id_rsa.pem"
  echo "${jumpbox_ssh_key}" > "${ssh_key_path}"
  chmod 400 "${ssh_key_path}"

  echo "${ssh_key_path}"
}

cleanup_bosh_ssh_tunnel() {
  killall -KILL ssh
}

setup_ssh_tunnel() {
  : ${BOSH_ENVIRONMENT:?}

  local jumpbox_ssh_key=${1?'Jumpbox SSH key is required.'}
  local jumpbox_address=${2?'Jumpbox address is required.'}

  local tmp_dir="$( mktemp -d /tmp/deploy-XXXXXX)"
  trap "{ rm -rf '$tmp_dir'; }" EXIT # will be overridden by future trap calls
  ssh_key_path="$( ssh_key_file "$tmp_dir" "$jumpbox_ssh_key" )"

  local ssh_args="-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -i ${ssh_key_path} -fnNT"
  trap "{ cleanup_bosh_ssh_tunnel; rm -rf '$tmp_dir'; }" EXIT

  ssh $ssh_args -D 1080 "${jumpbox_address}" &
  export BOSH_ALL_PROXY=socks5://localhost:1080
}

cleanup_ssh_tunnel() {
  local ssh_args=${1?'SSH arguments are required.'}
  local tmp_dir=${2?'temp dir is required.'}
  local jumpbox_address=${3?'Jumpbox address is required.'}

  ssh $ssh_args -S "${tmp_dir}/tunnel-socket" -O exit "${jumpbox_address}"
}

ssh_tunnel() {
  local jumpbox_ssh_key=${1?'Jumpbox SSH key is required.'}
  local jumpbox_address=${2?'Jumpbox address is required.'}
  local machine_internal_ip=${3?'Machine internal IP is required.'}

  local tmp_dir="$( mktemp -d /tmp/deploy-XXXXXX)"
  trap "{ rm -rf '$tmp_dir'; }" EXIT # will be overridden by future trap calls
  ssh_key_path="$( ssh_key_file "$tmp_dir" "$jumpbox_ssh_key" )"

  ssh_args="-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -i ${ssh_key_path}"
  ssh $ssh_args -M -S "${tmp_dir}/tunnel-socket" -fnNT -L 6868:"${machine_internal_ip}":6868 "${jumpbox_address}"
  trap "{ cleanup_ssh_tunnel '$ssh_args' '$tmp_dir' '$jumpbox_address'; rm -rf '$tmp_dir'; }" EXIT
}
